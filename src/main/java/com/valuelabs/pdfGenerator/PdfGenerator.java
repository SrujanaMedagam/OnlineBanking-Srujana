package com.valuelabs.pdfGenerator;

import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.itextpdf.text.Anchor;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.List;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import com.valuelabs.model.AccountTransactionDetails;
import com.valuelabs.model.LoginDetails;

@Service
public class PdfGenerator {
	@Autowired(required = true)
	
	LoginDetails loginDetails;

	private static String FILE = "d:/FirstPdf" + System.currentTimeMillis() + ".pdf";
	private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.BOLD);
	private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 11, Font.BOLD);
	private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.BOLD);
	private static Font bgcolor = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.BOLD);
	

	static String accountHolder;

	public void main(java.util.List transactionHistory, java.util.List profileData) {
		try {
			Document document = new Document();
			PdfWriter.getInstance(document, new FileOutputStream(FILE));
			document.open();
			addMetaData(document);
			addTitlePage(document, transactionHistory, profileData);
			//addContent(document, transactionHistory);
			document.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	// iText allows to add metadata to the PDF which can be viewed in your Adobe
	// Reader
	// under File -> Properties
	private static void addMetaData(Document document) {
		document.addTitle("My first PDF");
		document.addSubject("Using iText");
		document.addKeywords("Java, PDF, iText");
		document.addAuthor("Lars Vogel");
		document.addCreator("Lars Vogel");
	}

	private  void addTitlePage(Document document, java.util.List transactionHistory, java.util.List profileData)
			throws DocumentException {
		String accName = null ;
		String address = null ;
		Paragraph preface = new Paragraph();
		// We add one empty line
		addEmptyLine(preface, 1);
		// Lets write a big header
		preface.add(new Paragraph("OnlineBanking Detailed Statement", catFont));
		Iterator it = profileData.iterator();
		while(it.hasNext()){
			 loginDetails =(LoginDetails) it.next();
			accName = loginDetails.getAccountName();
			address = loginDetails.getAddress();
		}

				

		// AccountTransactionDetails ac = (AccountTransactionDetails)
		// ((java.util.List) transactionHistory).iterator().next();

		// System.out.println(accountHolder = ac.getAccountNumber());

		addEmptyLine(preface, 1);
		// Will create: Report generated by: _name, _date
		preface.add(new Paragraph(accName, // $NON-NLS-1$ //$NON-NLS-2$
											// //$NON-NLS-3$
				smallBold));
		preface.add(new Paragraph(address, // $NON-NLS-1$ //$NON-NLS-2$
											// //$NON-NLS-3$
				smallBold));
		addEmptyLine(preface, 3);
		preface.add(new Paragraph("NEVER SHARE your Card number, CVV, PIN, OTP, Internet Banking User ID, Password or URN with anyone, even if the caller claimsto be a bank employee. Sharing these details can lead to unauthorised access to your account.", smallBold));

		preface.add(new Paragraph("STATEMENT SUMMARY for Customer ID :"+ loginDetails.getAccountNumber() +" as on "+ new Date(), // $NON-NLS-1$ //$NON-NLS-2$
				// //$NON-NLS-3$
smallBold));
		
		//STATEMENT SUMMARY for Customer ID : 539781427 as on February 28, 2018
		addEmptyLine(preface, 8);

		/*
		 * preface.add(new Paragraph(
		 * "This document is a preliminary version and not subject to your license agreement or any other agreement with vogella.com ;-)."
		 * , redFont));
		 */

		document.add(preface);
		// Start a new page
		// document.newPage();
		
		createTable(document, transactionHistory);
		
		//*******************************************************
		
		
		/*Anchor anchor = new Anchor("First Chapter", catFont);
		anchor.setName("First Chapter");

		// Second parameter is the number of the chapter
		Chapter catPart = new Chapter(new Paragraph(anchor), 1);

		Paragraph subPara = new Paragraph("Subcategory 1", subFont);
		Section subCatPart = catPart.addSection(subPara);
		subCatPart.add(new Paragraph("Hello"));

		subPara = new Paragraph("Subcategory 2", subFont);
		subCatPart = catPart.addSection(subPara);
		subCatPart.add(new Paragraph("Paragraph 1"));
		subCatPart.add(new Paragraph("Paragraph 2"));
		subCatPart.add(new Paragraph("Paragraph 3"));

		// add a list
		createList(subCatPart);
		Paragraph paragraph = new Paragraph();
		addEmptyLine(paragraph, 5);
		subCatPart.add(paragraph);

		// add a table
		createTable( transactionHistory);

		// now add all this to the document
		document.add(catPart);

		// Next section
		anchor = new Anchor("Second Chapter", catFont);
		anchor.setName("Second Chapter");

		// Second parameter is the number of the chapter
		catPart = new Chapter(new Paragraph(anchor), 1);

		subPara = new Paragraph("Subcategory", subFont);
		subCatPart = catPart.addSection(subPara);
		subCatPart.add(new Paragraph("This is a very important message"));

		// now add all this to the document
		document.add(catPart);*/
		

	}

	/*private static void addContent(Document document, java.util.List transactionHistory) throws DocumentException {
		Anchor anchor = new Anchor("First Chapter", catFont);
		anchor.setName("First Chapter");

		// Second parameter is the number of the chapter
		Chapter catPart = new Chapter(new Paragraph(anchor), 1);

		Paragraph subPara = new Paragraph("Subcategory 1", subFont);
		Section subCatPart = catPart.addSection(subPara);
		subCatPart.add(new Paragraph("Hello"));

		subPara = new Paragraph("Subcategory 2", subFont);
		subCatPart = catPart.addSection(subPara);
		subCatPart.add(new Paragraph("Paragraph 1"));
		subCatPart.add(new Paragraph("Paragraph 2"));
		subCatPart.add(new Paragraph("Paragraph 3"));

		// add a list
		createList(subCatPart);
		Paragraph paragraph = new Paragraph();
		addEmptyLine(paragraph, 5);
		subCatPart.add(paragraph);

		// add a table
		createTable(subCatPart, transactionHistory);

		// now add all this to the document
		document.add(catPart);

		// Next section
		anchor = new Anchor("Second Chapter", catFont);
		anchor.setName("Second Chapter");

		// Second parameter is the number of the chapter
		catPart = new Chapter(new Paragraph(anchor), 1);

		subPara = new Paragraph("Subcategory", subFont);
		subCatPart = catPart.addSection(subPara);
		subCatPart.add(new Paragraph("This is a very important message"));

		// now add all this to the document
		document.add(catPart);

	}*/

	private static void createTable(Document document, java.util.List transactionHistory) throws DocumentException {
		PdfPTable table = new PdfPTable(6);

		// t.setBorderColor(BaseColor.GRAY);
		// t.setPadding(4);
		// t.setSpacing(4);
		// t.setBorderWidth(1);

		PdfPCell c1 = new PdfPCell(new Phrase("AccountNumber"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);

		c1 = new PdfPCell(new Phrase("TransactionDate"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);

		c1 = new PdfPCell(new Phrase("TransactionType"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);
		c1 = new PdfPCell(new Phrase("Amount"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);
		c1 = new PdfPCell(new Phrase("BalanceAmount"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);
		c1 = new PdfPCell(new Phrase("Remarks"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);
		table.setHeaderRows(1);

		Iterator it = transactionHistory.iterator();
		while (it.hasNext()) {
			AccountTransactionDetails at = (AccountTransactionDetails) it.next();
			// AccountHolder =at.getAccountNumber();
			table.addCell(at.getAccountNumber());
			table.addCell(at.getTransactionDate());
			table.addCell(at.getTransactionType());
			table.addCell(at.getToAccount());
		//	table.addCell(at.getBalanceAmount());
			table.addCell(at.getRemarks());
			/*
			 * table.addCell("2.1"); table.addCell("2.2"); table.addCell("2.3");
			 */
		}

		document.add(table);

	}

	private static void createList(Section subCatPart) {
		List list = new List(true, false, 10);
		list.add(new ListItem("First point"));
		list.add(new ListItem("Second point"));
		list.add(new ListItem("Third point"));
		subCatPart.add(list);
	}

	private static void addEmptyLine(Paragraph paragraph, int number) {
		for (int i = 0; i < number; i++) {
			paragraph.add(new Paragraph(" "));
		}
	}
}